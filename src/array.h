// SPDX-FileCopyrightText: 2025 Erin Catto
// SPDX-License-Identifier: MIT

// Auto-generated by code_gen/main.c - DO NOT EDIT
// Array type declarations

#pragma once
#include "core.h"

// =============================================================================
// Dynamic Array Declarations
// =============================================================================

// These can be used without the type T being fully defined (forward declarations)
// Each array type provides Create, Reserve, and Destroy functions

// int
typedef struct
{
  int* data;
  int count;
  int capacity;
} b2IntArray;

b2IntArray b2IntArray_Create(int capacity);
void b2IntArray_Reserve(b2IntArray* a, int newCapacity);
void b2IntArray_Destroy(b2IntArray* a);

// b2ArenaEntry
typedef struct
{
  struct b2ArenaEntry* data;
  int count;
  int capacity;
} b2ArenaEntryArray;

b2ArenaEntryArray b2ArenaEntryArray_Create(int capacity);
void b2ArenaEntryArray_Reserve(b2ArenaEntryArray* a, int newCapacity);
void b2ArenaEntryArray_Destroy(b2ArenaEntryArray* a);

// b2Body
typedef struct
{
  struct b2Body* data;
  int count;
  int capacity;
} b2BodyArray;

b2BodyArray b2BodyArray_Create(int capacity);
void b2BodyArray_Reserve(b2BodyArray* a, int newCapacity);
void b2BodyArray_Destroy(b2BodyArray* a);

// b2BodyMoveEvent
typedef struct
{
  struct b2BodyMoveEvent* data;
  int count;
  int capacity;
} b2BodyMoveEventArray;

b2BodyMoveEventArray b2BodyMoveEventArray_Create(int capacity);
void b2BodyMoveEventArray_Reserve(b2BodyMoveEventArray* a, int newCapacity);
void b2BodyMoveEventArray_Destroy(b2BodyMoveEventArray* a);

// b2BodySim
typedef struct
{
  struct b2BodySim* data;
  int count;
  int capacity;
} b2BodySimArray;

b2BodySimArray b2BodySimArray_Create(int capacity);
void b2BodySimArray_Reserve(b2BodySimArray* a, int newCapacity);
void b2BodySimArray_Destroy(b2BodySimArray* a);

// b2BodyState
typedef struct
{
  struct b2BodyState* data;
  int count;
  int capacity;
} b2BodyStateArray;

b2BodyStateArray b2BodyStateArray_Create(int capacity);
void b2BodyStateArray_Reserve(b2BodyStateArray* a, int newCapacity);
void b2BodyStateArray_Destroy(b2BodyStateArray* a);

// b2ChainShape
typedef struct
{
  struct b2ChainShape* data;
  int count;
  int capacity;
} b2ChainShapeArray;

b2ChainShapeArray b2ChainShapeArray_Create(int capacity);
void b2ChainShapeArray_Reserve(b2ChainShapeArray* a, int newCapacity);
void b2ChainShapeArray_Destroy(b2ChainShapeArray* a);

// b2Contact
typedef struct
{
  struct b2Contact* data;
  int count;
  int capacity;
} b2ContactArray;

b2ContactArray b2ContactArray_Create(int capacity);
void b2ContactArray_Reserve(b2ContactArray* a, int newCapacity);
void b2ContactArray_Destroy(b2ContactArray* a);

// b2ContactBeginTouchEvent
typedef struct
{
  struct b2ContactBeginTouchEvent* data;
  int count;
  int capacity;
} b2ContactBeginTouchEventArray;

b2ContactBeginTouchEventArray b2ContactBeginTouchEventArray_Create(int capacity);
void b2ContactBeginTouchEventArray_Reserve(b2ContactBeginTouchEventArray* a, int newCapacity);
void b2ContactBeginTouchEventArray_Destroy(b2ContactBeginTouchEventArray* a);

// b2ContactEndTouchEvent
typedef struct
{
  struct b2ContactEndTouchEvent* data;
  int count;
  int capacity;
} b2ContactEndTouchEventArray;

b2ContactEndTouchEventArray b2ContactEndTouchEventArray_Create(int capacity);
void b2ContactEndTouchEventArray_Reserve(b2ContactEndTouchEventArray* a, int newCapacity);
void b2ContactEndTouchEventArray_Destroy(b2ContactEndTouchEventArray* a);

// b2ContactHitEvent
typedef struct
{
  struct b2ContactHitEvent* data;
  int count;
  int capacity;
} b2ContactHitEventArray;

b2ContactHitEventArray b2ContactHitEventArray_Create(int capacity);
void b2ContactHitEventArray_Reserve(b2ContactHitEventArray* a, int newCapacity);
void b2ContactHitEventArray_Destroy(b2ContactHitEventArray* a);

// b2ContactSim
typedef struct
{
  struct b2ContactSim* data;
  int count;
  int capacity;
} b2ContactSimArray;

b2ContactSimArray b2ContactSimArray_Create(int capacity);
void b2ContactSimArray_Reserve(b2ContactSimArray* a, int newCapacity);
void b2ContactSimArray_Destroy(b2ContactSimArray* a);

// b2Island
typedef struct
{
  struct b2Island* data;
  int count;
  int capacity;
} b2IslandArray;

b2IslandArray b2IslandArray_Create(int capacity);
void b2IslandArray_Reserve(b2IslandArray* a, int newCapacity);
void b2IslandArray_Destroy(b2IslandArray* a);

// b2IslandSim
typedef struct
{
  struct b2IslandSim* data;
  int count;
  int capacity;
} b2IslandSimArray;

b2IslandSimArray b2IslandSimArray_Create(int capacity);
void b2IslandSimArray_Reserve(b2IslandSimArray* a, int newCapacity);
void b2IslandSimArray_Destroy(b2IslandSimArray* a);

// b2Joint
typedef struct
{
  struct b2Joint* data;
  int count;
  int capacity;
} b2JointArray;

b2JointArray b2JointArray_Create(int capacity);
void b2JointArray_Reserve(b2JointArray* a, int newCapacity);
void b2JointArray_Destroy(b2JointArray* a);

// b2JointEvent
typedef struct
{
  struct b2JointEvent* data;
  int count;
  int capacity;
} b2JointEventArray;

b2JointEventArray b2JointEventArray_Create(int capacity);
void b2JointEventArray_Reserve(b2JointEventArray* a, int newCapacity);
void b2JointEventArray_Destroy(b2JointEventArray* a);

// b2JointSim
typedef struct
{
  struct b2JointSim* data;
  int count;
  int capacity;
} b2JointSimArray;

b2JointSimArray b2JointSimArray_Create(int capacity);
void b2JointSimArray_Reserve(b2JointSimArray* a, int newCapacity);
void b2JointSimArray_Destroy(b2JointSimArray* a);

// b2Sensor
typedef struct
{
  struct b2Sensor* data;
  int count;
  int capacity;
} b2SensorArray;

b2SensorArray b2SensorArray_Create(int capacity);
void b2SensorArray_Reserve(b2SensorArray* a, int newCapacity);
void b2SensorArray_Destroy(b2SensorArray* a);

// b2SensorBeginTouchEvent
typedef struct
{
  struct b2SensorBeginTouchEvent* data;
  int count;
  int capacity;
} b2SensorBeginTouchEventArray;

b2SensorBeginTouchEventArray b2SensorBeginTouchEventArray_Create(int capacity);
void b2SensorBeginTouchEventArray_Reserve(b2SensorBeginTouchEventArray* a, int newCapacity);
void b2SensorBeginTouchEventArray_Destroy(b2SensorBeginTouchEventArray* a);

// b2SensorEndTouchEvent
typedef struct
{
  struct b2SensorEndTouchEvent* data;
  int count;
  int capacity;
} b2SensorEndTouchEventArray;

b2SensorEndTouchEventArray b2SensorEndTouchEventArray_Create(int capacity);
void b2SensorEndTouchEventArray_Reserve(b2SensorEndTouchEventArray* a, int newCapacity);
void b2SensorEndTouchEventArray_Destroy(b2SensorEndTouchEventArray* a);

// b2SensorTaskContext
typedef struct
{
  struct b2SensorTaskContext* data;
  int count;
  int capacity;
} b2SensorTaskContextArray;

b2SensorTaskContextArray b2SensorTaskContextArray_Create(int capacity);
void b2SensorTaskContextArray_Reserve(b2SensorTaskContextArray* a, int newCapacity);
void b2SensorTaskContextArray_Destroy(b2SensorTaskContextArray* a);

// b2Shape
typedef struct
{
  struct b2Shape* data;
  int count;
  int capacity;
} b2ShapeArray;

b2ShapeArray b2ShapeArray_Create(int capacity);
void b2ShapeArray_Reserve(b2ShapeArray* a, int newCapacity);
void b2ShapeArray_Destroy(b2ShapeArray* a);

// b2Visitor
typedef struct
{
  struct b2Visitor* data;
  int count;
  int capacity;
} b2VisitorArray;

b2VisitorArray b2VisitorArray_Create(int capacity);
void b2VisitorArray_Reserve(b2VisitorArray* a, int newCapacity);
void b2VisitorArray_Destroy(b2VisitorArray* a);

// b2SolverSet
typedef struct
{
  struct b2SolverSet* data;
  int count;
  int capacity;
} b2SolverSetArray;

b2SolverSetArray b2SolverSetArray_Create(int capacity);
void b2SolverSetArray_Reserve(b2SolverSetArray* a, int newCapacity);
void b2SolverSetArray_Destroy(b2SolverSetArray* a);

// b2TaskContext
typedef struct
{
  struct b2TaskContext* data;
  int count;
  int capacity;
} b2TaskContextArray;

b2TaskContextArray b2TaskContextArray_Create(int capacity);
void b2TaskContextArray_Reserve(b2TaskContextArray* a, int newCapacity);
void b2TaskContextArray_Destroy(b2TaskContextArray* a);

// b2SensorHit
typedef struct
{
  struct b2SensorHit* data;
  int count;
  int capacity;
} b2SensorHitArray;

b2SensorHitArray b2SensorHitArray_Create(int capacity);
void b2SensorHitArray_Reserve(b2SensorHitArray* a, int newCapacity);
void b2SensorHitArray_Destroy(b2SensorHitArray* a);

// Inline functions for native types.

// =============================================================================
// b2Int
// =============================================================================

static inline void b2IntArray_Resize(b2IntArray* a, int count)
{
  b2IntArray_Reserve(a, count);
  a->count = count;
}

static inline int* b2IntArray_Get(b2IntArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline int* b2IntArray_Add(b2IntArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2IntArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2IntArray_Push(b2IntArray* a, int value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2IntArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2IntArray_Set(b2IntArray* a, int index, int value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2IntArray_RemoveSwap(b2IntArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline int b2IntArray_Pop(b2IntArray* a)
{
  B2_ASSERT(a->count > 0);
  int value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2IntArray_Clear(b2IntArray* a)
{
  a->count = 0;
}

static inline int b2IntArray_ByteCount(b2IntArray* a)
{
  return (int)(a->capacity * sizeof(int));
}

