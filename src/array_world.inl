// SPDX-FileCopyrightText: 2025 Erin Catto
// SPDX-License-Identifier: MIT

// Auto-generated by code_gen/main.c - DO NOT EDIT
// Inline array functions

#pragma once

#include "array.h"

// =============================================================================
// b2BodyMoveEvent
// =============================================================================

static inline void b2BodyMoveEventArray_Resize(b2BodyMoveEventArray* a, int count)
{
  b2BodyMoveEventArray_Reserve(a, count);
  a->count = count;
}

static inline b2BodyMoveEvent* b2BodyMoveEventArray_Get(b2BodyMoveEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2BodyMoveEvent* b2BodyMoveEventArray_Add(b2BodyMoveEventArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2BodyMoveEventArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2BodyMoveEventArray_Push(b2BodyMoveEventArray* a, b2BodyMoveEvent value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2BodyMoveEventArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2BodyMoveEventArray_Set(b2BodyMoveEventArray* a, int index, b2BodyMoveEvent value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2BodyMoveEventArray_RemoveSwap(b2BodyMoveEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2BodyMoveEvent b2BodyMoveEventArray_Pop(b2BodyMoveEventArray* a)
{
  B2_ASSERT(a->count > 0);
  b2BodyMoveEvent value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2BodyMoveEventArray_Clear(b2BodyMoveEventArray* a)
{
  a->count = 0;
}

static inline int b2BodyMoveEventArray_ByteCount(b2BodyMoveEventArray* a)
{
  return (int)(a->capacity * sizeof(b2BodyMoveEvent));
}

// =============================================================================
// b2ContactBeginTouchEvent
// =============================================================================

static inline void b2ContactBeginTouchEventArray_Resize(b2ContactBeginTouchEventArray* a, int count)
{
  b2ContactBeginTouchEventArray_Reserve(a, count);
  a->count = count;
}

static inline b2ContactBeginTouchEvent* b2ContactBeginTouchEventArray_Get(b2ContactBeginTouchEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2ContactBeginTouchEvent* b2ContactBeginTouchEventArray_Add(b2ContactBeginTouchEventArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2ContactBeginTouchEventArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2ContactBeginTouchEventArray_Push(b2ContactBeginTouchEventArray* a, b2ContactBeginTouchEvent value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2ContactBeginTouchEventArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2ContactBeginTouchEventArray_Set(b2ContactBeginTouchEventArray* a, int index, b2ContactBeginTouchEvent value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2ContactBeginTouchEventArray_RemoveSwap(b2ContactBeginTouchEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2ContactBeginTouchEvent b2ContactBeginTouchEventArray_Pop(b2ContactBeginTouchEventArray* a)
{
  B2_ASSERT(a->count > 0);
  b2ContactBeginTouchEvent value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2ContactBeginTouchEventArray_Clear(b2ContactBeginTouchEventArray* a)
{
  a->count = 0;
}

static inline int b2ContactBeginTouchEventArray_ByteCount(b2ContactBeginTouchEventArray* a)
{
  return (int)(a->capacity * sizeof(b2ContactBeginTouchEvent));
}

// =============================================================================
// b2ContactEndTouchEvent
// =============================================================================

static inline void b2ContactEndTouchEventArray_Resize(b2ContactEndTouchEventArray* a, int count)
{
  b2ContactEndTouchEventArray_Reserve(a, count);
  a->count = count;
}

static inline b2ContactEndTouchEvent* b2ContactEndTouchEventArray_Get(b2ContactEndTouchEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2ContactEndTouchEvent* b2ContactEndTouchEventArray_Add(b2ContactEndTouchEventArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2ContactEndTouchEventArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2ContactEndTouchEventArray_Push(b2ContactEndTouchEventArray* a, b2ContactEndTouchEvent value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2ContactEndTouchEventArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2ContactEndTouchEventArray_Set(b2ContactEndTouchEventArray* a, int index, b2ContactEndTouchEvent value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2ContactEndTouchEventArray_RemoveSwap(b2ContactEndTouchEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2ContactEndTouchEvent b2ContactEndTouchEventArray_Pop(b2ContactEndTouchEventArray* a)
{
  B2_ASSERT(a->count > 0);
  b2ContactEndTouchEvent value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2ContactEndTouchEventArray_Clear(b2ContactEndTouchEventArray* a)
{
  a->count = 0;
}

static inline int b2ContactEndTouchEventArray_ByteCount(b2ContactEndTouchEventArray* a)
{
  return (int)(a->capacity * sizeof(b2ContactEndTouchEvent));
}

// =============================================================================
// b2ContactHitEvent
// =============================================================================

static inline void b2ContactHitEventArray_Resize(b2ContactHitEventArray* a, int count)
{
  b2ContactHitEventArray_Reserve(a, count);
  a->count = count;
}

static inline b2ContactHitEvent* b2ContactHitEventArray_Get(b2ContactHitEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2ContactHitEvent* b2ContactHitEventArray_Add(b2ContactHitEventArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2ContactHitEventArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2ContactHitEventArray_Push(b2ContactHitEventArray* a, b2ContactHitEvent value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2ContactHitEventArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2ContactHitEventArray_Set(b2ContactHitEventArray* a, int index, b2ContactHitEvent value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2ContactHitEventArray_RemoveSwap(b2ContactHitEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2ContactHitEvent b2ContactHitEventArray_Pop(b2ContactHitEventArray* a)
{
  B2_ASSERT(a->count > 0);
  b2ContactHitEvent value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2ContactHitEventArray_Clear(b2ContactHitEventArray* a)
{
  a->count = 0;
}

static inline int b2ContactHitEventArray_ByteCount(b2ContactHitEventArray* a)
{
  return (int)(a->capacity * sizeof(b2ContactHitEvent));
}

// =============================================================================
// b2JointEvent
// =============================================================================

static inline void b2JointEventArray_Resize(b2JointEventArray* a, int count)
{
  b2JointEventArray_Reserve(a, count);
  a->count = count;
}

static inline b2JointEvent* b2JointEventArray_Get(b2JointEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2JointEvent* b2JointEventArray_Add(b2JointEventArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2JointEventArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2JointEventArray_Push(b2JointEventArray* a, b2JointEvent value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2JointEventArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2JointEventArray_Set(b2JointEventArray* a, int index, b2JointEvent value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2JointEventArray_RemoveSwap(b2JointEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2JointEvent b2JointEventArray_Pop(b2JointEventArray* a)
{
  B2_ASSERT(a->count > 0);
  b2JointEvent value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2JointEventArray_Clear(b2JointEventArray* a)
{
  a->count = 0;
}

static inline int b2JointEventArray_ByteCount(b2JointEventArray* a)
{
  return (int)(a->capacity * sizeof(b2JointEvent));
}

// =============================================================================
// b2SensorBeginTouchEvent
// =============================================================================

static inline void b2SensorBeginTouchEventArray_Resize(b2SensorBeginTouchEventArray* a, int count)
{
  b2SensorBeginTouchEventArray_Reserve(a, count);
  a->count = count;
}

static inline b2SensorBeginTouchEvent* b2SensorBeginTouchEventArray_Get(b2SensorBeginTouchEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2SensorBeginTouchEvent* b2SensorBeginTouchEventArray_Add(b2SensorBeginTouchEventArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SensorBeginTouchEventArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2SensorBeginTouchEventArray_Push(b2SensorBeginTouchEventArray* a, b2SensorBeginTouchEvent value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SensorBeginTouchEventArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2SensorBeginTouchEventArray_Set(b2SensorBeginTouchEventArray* a, int index, b2SensorBeginTouchEvent value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2SensorBeginTouchEventArray_RemoveSwap(b2SensorBeginTouchEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2SensorBeginTouchEvent b2SensorBeginTouchEventArray_Pop(b2SensorBeginTouchEventArray* a)
{
  B2_ASSERT(a->count > 0);
  b2SensorBeginTouchEvent value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2SensorBeginTouchEventArray_Clear(b2SensorBeginTouchEventArray* a)
{
  a->count = 0;
}

static inline int b2SensorBeginTouchEventArray_ByteCount(b2SensorBeginTouchEventArray* a)
{
  return (int)(a->capacity * sizeof(b2SensorBeginTouchEvent));
}

// =============================================================================
// b2SensorEndTouchEvent
// =============================================================================

static inline void b2SensorEndTouchEventArray_Resize(b2SensorEndTouchEventArray* a, int count)
{
  b2SensorEndTouchEventArray_Reserve(a, count);
  a->count = count;
}

static inline b2SensorEndTouchEvent* b2SensorEndTouchEventArray_Get(b2SensorEndTouchEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2SensorEndTouchEvent* b2SensorEndTouchEventArray_Add(b2SensorEndTouchEventArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SensorEndTouchEventArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2SensorEndTouchEventArray_Push(b2SensorEndTouchEventArray* a, b2SensorEndTouchEvent value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SensorEndTouchEventArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2SensorEndTouchEventArray_Set(b2SensorEndTouchEventArray* a, int index, b2SensorEndTouchEvent value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2SensorEndTouchEventArray_RemoveSwap(b2SensorEndTouchEventArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2SensorEndTouchEvent b2SensorEndTouchEventArray_Pop(b2SensorEndTouchEventArray* a)
{
  B2_ASSERT(a->count > 0);
  b2SensorEndTouchEvent value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2SensorEndTouchEventArray_Clear(b2SensorEndTouchEventArray* a)
{
  a->count = 0;
}

static inline int b2SensorEndTouchEventArray_ByteCount(b2SensorEndTouchEventArray* a)
{
  return (int)(a->capacity * sizeof(b2SensorEndTouchEvent));
}

// =============================================================================
// b2TaskContext
// =============================================================================

static inline void b2TaskContextArray_Resize(b2TaskContextArray* a, int count)
{
  b2TaskContextArray_Reserve(a, count);
  a->count = count;
}

static inline b2TaskContext* b2TaskContextArray_Get(b2TaskContextArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2TaskContext* b2TaskContextArray_Add(b2TaskContextArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2TaskContextArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2TaskContextArray_Push(b2TaskContextArray* a, b2TaskContext value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2TaskContextArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2TaskContextArray_Set(b2TaskContextArray* a, int index, b2TaskContext value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2TaskContextArray_RemoveSwap(b2TaskContextArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2TaskContext b2TaskContextArray_Pop(b2TaskContextArray* a)
{
  B2_ASSERT(a->count > 0);
  b2TaskContext value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2TaskContextArray_Clear(b2TaskContextArray* a)
{
  a->count = 0;
}

static inline int b2TaskContextArray_ByteCount(b2TaskContextArray* a)
{
  return (int)(a->capacity * sizeof(b2TaskContext));
}

