// SPDX-FileCopyrightText: 2025 Erin Catto
// SPDX-License-Identifier: MIT

// Auto-generated by code_gen/main.c - DO NOT EDIT
// Inline array functions

#pragma once

#include "array.h"

// =============================================================================
// b2ArenaEntry
// =============================================================================

static inline void b2ArenaEntryArray_Resize(b2ArenaEntryArray* a, int count)
{
  b2ArenaEntryArray_Reserve(a, count);
  a->count = count;
}

static inline b2ArenaEntry* b2ArenaEntryArray_Get(b2ArenaEntryArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2ArenaEntry* b2ArenaEntryArray_Add(b2ArenaEntryArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2ArenaEntryArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2ArenaEntryArray_Push(b2ArenaEntryArray* a, b2ArenaEntry value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2ArenaEntryArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2ArenaEntryArray_Set(b2ArenaEntryArray* a, int index, b2ArenaEntry value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2ArenaEntryArray_RemoveSwap(b2ArenaEntryArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2ArenaEntry b2ArenaEntryArray_Pop(b2ArenaEntryArray* a)
{
  B2_ASSERT(a->count > 0);
  b2ArenaEntry value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2ArenaEntryArray_Clear(b2ArenaEntryArray* a)
{
  a->count = 0;
}

static inline int b2ArenaEntryArray_ByteCount(b2ArenaEntryArray* a)
{
  return (int)(a->capacity * sizeof(b2ArenaEntry));
}

