// SPDX-FileCopyrightText: 2025 Erin Catto
// SPDX-License-Identifier: MIT

// Auto-generated by code_gen/main.c - DO NOT EDIT
// Inline array functions

#pragma once

#include "array.h"

// =============================================================================
// b2Body
// =============================================================================

static inline void b2BodyArray_Resize(b2BodyArray* a, int count)
{
  b2BodyArray_Reserve(a, count);
  a->count = count;
}

static inline b2Body* b2BodyArray_Get(b2BodyArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2Body* b2BodyArray_Add(b2BodyArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2BodyArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2BodyArray_Push(b2BodyArray* a, b2Body value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2BodyArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2BodyArray_Set(b2BodyArray* a, int index, b2Body value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2BodyArray_RemoveSwap(b2BodyArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2Body b2BodyArray_Pop(b2BodyArray* a)
{
  B2_ASSERT(a->count > 0);
  b2Body value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2BodyArray_Clear(b2BodyArray* a)
{
  a->count = 0;
}

static inline int b2BodyArray_ByteCount(b2BodyArray* a)
{
  return (int)(a->capacity * sizeof(b2Body));
}

// =============================================================================
// b2BodySim
// =============================================================================

static inline void b2BodySimArray_Resize(b2BodySimArray* a, int count)
{
  b2BodySimArray_Reserve(a, count);
  a->count = count;
}

static inline b2BodySim* b2BodySimArray_Get(b2BodySimArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2BodySim* b2BodySimArray_Add(b2BodySimArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2BodySimArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2BodySimArray_Push(b2BodySimArray* a, b2BodySim value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2BodySimArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2BodySimArray_Set(b2BodySimArray* a, int index, b2BodySim value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2BodySimArray_RemoveSwap(b2BodySimArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2BodySim b2BodySimArray_Pop(b2BodySimArray* a)
{
  B2_ASSERT(a->count > 0);
  b2BodySim value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2BodySimArray_Clear(b2BodySimArray* a)
{
  a->count = 0;
}

static inline int b2BodySimArray_ByteCount(b2BodySimArray* a)
{
  return (int)(a->capacity * sizeof(b2BodySim));
}

// =============================================================================
// b2BodyState
// =============================================================================

static inline void b2BodyStateArray_Resize(b2BodyStateArray* a, int count)
{
  b2BodyStateArray_Reserve(a, count);
  a->count = count;
}

static inline b2BodyState* b2BodyStateArray_Get(b2BodyStateArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2BodyState* b2BodyStateArray_Add(b2BodyStateArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2BodyStateArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2BodyStateArray_Push(b2BodyStateArray* a, b2BodyState value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2BodyStateArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2BodyStateArray_Set(b2BodyStateArray* a, int index, b2BodyState value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2BodyStateArray_RemoveSwap(b2BodyStateArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2BodyState b2BodyStateArray_Pop(b2BodyStateArray* a)
{
  B2_ASSERT(a->count > 0);
  b2BodyState value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2BodyStateArray_Clear(b2BodyStateArray* a)
{
  a->count = 0;
}

static inline int b2BodyStateArray_ByteCount(b2BodyStateArray* a)
{
  return (int)(a->capacity * sizeof(b2BodyState));
}

