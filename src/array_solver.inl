// SPDX-FileCopyrightText: 2025 Erin Catto
// SPDX-License-Identifier: MIT

// Auto-generated by code_gen/main.c - DO NOT EDIT
// Inline array functions

#pragma once

#include "array.h"

// =============================================================================
// b2SolverSet
// =============================================================================

static inline void b2SolverSetArray_Resize(b2SolverSetArray* a, int count)
{
  b2SolverSetArray_Reserve(a, count);
  a->count = count;
}

static inline b2SolverSet* b2SolverSetArray_Get(b2SolverSetArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2SolverSet* b2SolverSetArray_Add(b2SolverSetArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SolverSetArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2SolverSetArray_Push(b2SolverSetArray* a, b2SolverSet value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SolverSetArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2SolverSetArray_Set(b2SolverSetArray* a, int index, b2SolverSet value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2SolverSetArray_RemoveSwap(b2SolverSetArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2SolverSet b2SolverSetArray_Pop(b2SolverSetArray* a)
{
  B2_ASSERT(a->count > 0);
  b2SolverSet value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2SolverSetArray_Clear(b2SolverSetArray* a)
{
  a->count = 0;
}

static inline int b2SolverSetArray_ByteCount(b2SolverSetArray* a)
{
  return (int)(a->capacity * sizeof(b2SolverSet));
}

