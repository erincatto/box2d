// SPDX-FileCopyrightText: 2025 Erin Catto
// SPDX-License-Identifier: MIT

// Auto-generated by code_gen/main.c - DO NOT EDIT
// Inline array functions

#pragma once

#include "array.h"

// =============================================================================
// b2Sensor
// =============================================================================

static inline void b2SensorArray_Resize(b2SensorArray* a, int count)
{
  b2SensorArray_Reserve(a, count);
  a->count = count;
}

static inline b2Sensor* b2SensorArray_Get(b2SensorArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2Sensor* b2SensorArray_Add(b2SensorArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SensorArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2SensorArray_Push(b2SensorArray* a, b2Sensor value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SensorArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2SensorArray_Set(b2SensorArray* a, int index, b2Sensor value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2SensorArray_RemoveSwap(b2SensorArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2Sensor b2SensorArray_Pop(b2SensorArray* a)
{
  B2_ASSERT(a->count > 0);
  b2Sensor value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2SensorArray_Clear(b2SensorArray* a)
{
  a->count = 0;
}

static inline int b2SensorArray_ByteCount(b2SensorArray* a)
{
  return (int)(a->capacity * sizeof(b2Sensor));
}

// =============================================================================
// b2SensorTaskContext
// =============================================================================

static inline void b2SensorTaskContextArray_Resize(b2SensorTaskContextArray* a, int count)
{
  b2SensorTaskContextArray_Reserve(a, count);
  a->count = count;
}

static inline b2SensorTaskContext* b2SensorTaskContextArray_Get(b2SensorTaskContextArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2SensorTaskContext* b2SensorTaskContextArray_Add(b2SensorTaskContextArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SensorTaskContextArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2SensorTaskContextArray_Push(b2SensorTaskContextArray* a, b2SensorTaskContext value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SensorTaskContextArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2SensorTaskContextArray_Set(b2SensorTaskContextArray* a, int index, b2SensorTaskContext value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2SensorTaskContextArray_RemoveSwap(b2SensorTaskContextArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2SensorTaskContext b2SensorTaskContextArray_Pop(b2SensorTaskContextArray* a)
{
  B2_ASSERT(a->count > 0);
  b2SensorTaskContext value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2SensorTaskContextArray_Clear(b2SensorTaskContextArray* a)
{
  a->count = 0;
}

static inline int b2SensorTaskContextArray_ByteCount(b2SensorTaskContextArray* a)
{
  return (int)(a->capacity * sizeof(b2SensorTaskContext));
}

// =============================================================================
// b2Visitor
// =============================================================================

static inline void b2VisitorArray_Resize(b2VisitorArray* a, int count)
{
  b2VisitorArray_Reserve(a, count);
  a->count = count;
}

static inline b2Visitor* b2VisitorArray_Get(b2VisitorArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2Visitor* b2VisitorArray_Add(b2VisitorArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2VisitorArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2VisitorArray_Push(b2VisitorArray* a, b2Visitor value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2VisitorArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2VisitorArray_Set(b2VisitorArray* a, int index, b2Visitor value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2VisitorArray_RemoveSwap(b2VisitorArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2Visitor b2VisitorArray_Pop(b2VisitorArray* a)
{
  B2_ASSERT(a->count > 0);
  b2Visitor value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2VisitorArray_Clear(b2VisitorArray* a)
{
  a->count = 0;
}

static inline int b2VisitorArray_ByteCount(b2VisitorArray* a)
{
  return (int)(a->capacity * sizeof(b2Visitor));
}

// =============================================================================
// b2SensorHit
// =============================================================================

static inline void b2SensorHitArray_Resize(b2SensorHitArray* a, int count)
{
  b2SensorHitArray_Reserve(a, count);
  a->count = count;
}

static inline b2SensorHit* b2SensorHitArray_Get(b2SensorHitArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  return a->data + index;
}

static inline b2SensorHit* b2SensorHitArray_Add(b2SensorHitArray* a)
{
  if (a->count == a->capacity)
  {

    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SensorHitArray_Reserve(a, newCapacity);
  }
  a->count += 1;
  return a->data + (a->count - 1);
}

static inline void b2SensorHitArray_Push(b2SensorHitArray* a, b2SensorHit value)
{
  if (a->count == a->capacity)
  {
    int newCapacity = a->capacity < 2 ? 2 : a->capacity + (a->capacity >> 1);
    b2SensorHitArray_Reserve(a, newCapacity);
  }
  a->data[a->count] = value;
  a->count += 1;
}

static inline void b2SensorHitArray_Set(b2SensorHitArray* a, int index, b2SensorHit value)
{
  B2_ASSERT(0 <= index && index < a->count);
  a->data[index] = value;
}

static inline int b2SensorHitArray_RemoveSwap(b2SensorHitArray* a, int index)
{
  B2_ASSERT(0 <= index && index < a->count);
  int movedIndex = B2_NULL_INDEX;

  if (index != a->count - 1)
  {
    movedIndex = a->count - 1;
    a->data[index] = a->data[movedIndex];
  }

  a->count -= 1;
  return movedIndex;
}

static inline b2SensorHit b2SensorHitArray_Pop(b2SensorHitArray* a)
{
  B2_ASSERT(a->count > 0);
  b2SensorHit value = a->data[a->count - 1];
  a->count -= 1;
  return value;
}

static inline void b2SensorHitArray_Clear(b2SensorHitArray* a)
{
  a->count = 0;
}

static inline int b2SensorHitArray_ByteCount(b2SensorHitArray* a)
{
  return (int)(a->capacity * sizeof(b2SensorHit));
}

